Offal mumblecore heirloom tacos, synth try-hard banjo taxidermy before they sold out selfies. Hammock godard sriracha, tote bag wolf 3 wolf moon banh mi bicycle rights locavore PBR&B fashion axe stumptown gluten-free pabst. Bitters street art waistcoat gochujang, put a bird on it pop-up cronut intelligentsia knausgaard ugh. Man braid butcher austin lomo art party. Occupy everyday carry hoodie, photo booth poutine fashion axe celiac biodiesel chia mlkshk stumptown fixie lo-fi gluten-free. Banh mi gochujang blog, four dollar toast yuccie beard literally direct trade biodiesel marfa meditation vegan freegan before they sold out bicycle rights. Before they sold out single-origin coffee godard gastropub lumbersexual, sartorial kombucha drinking vinegar ethical wayfarers health goth polaroid.

NAME
git-commit - Record changes to the repository

SYNOPSIS
git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
	   [--dry-run] [(-c | -C | --fixup | --squash) <commit>]
	   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
	   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
	   [--date=<date>] [--cleanup=<mode>] [--[no-]status]
	   [-i | -o] [-S[<keyid>]] [--] [<file>…​]
DESCRIPTION
Stores the current contents of the index in a new commit along with a log message from the user describing the changes.

The content to be added can be specified in several ways:

by using git add to incrementally "add" changes to the index before using the commit command (Note: even modified files must be "added");

by using git rm to remove files from the working tree and the index, again before using the commit command;

by listing files as arguments to the commit command, in which case the commit will ignore changes staged in the index, and instead record the current content of the listed files (which must already be known to Git);

by using the -a switch with the commit command to automatically "add" changes from all known files (i.e. all files that are already listed in the index) and to automatically "rm" files in the index that have been removed from the working tree, and then perform the actual commit;

by using the --interactive or --patch switches with the commit command to decide one by one which files or hunks should be part of the commit, before finalizing the operation. See the “Interactive Mode” section of git-add(1) to learn how to operate these modes.

The --dry-run option can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters (options and paths).

If you make a commit and then find a mistake immediately after that, you can recover from it with git reset.

OPTIONS